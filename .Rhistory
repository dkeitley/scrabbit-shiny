shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(rhdf5)
test <- H5Fopen("G:\\My Drive\\Postgrad\\PhD\Projects\\rabbit-gastrulation-atlas\\RabbitGastrulation2021\\data-in\\rabbit\\anndata.h5ad")
test <- H5Fopen("G:\\My Drive\\Postgrad\\PhD\\Projects\\rabbit-gastrulation-atlas\\RabbitGastrulation2021\\data-in\\rabbit\\anndata.h5ad")
test
library(LoomExperiment)
test <- LoomExperiment::import("G:\\My Drive\\Postgrad\\PhD\\Projects\\rabbit-gastrulation-atlas\\RabbitGastrulation2021\\data-in\\rabbit\\data.loom")
test
library(HDF5Array)
test <- loadHDF5SummarizedExperiment("G:\\My Drive\\Postgrad\\PhD\\Projects\\rabbit-gastrulation-atlas\\RabbitGastrulation2021\\data-in\\rabbit\\anndata.h5ad)
test <- loadHDF5SummarizedExperiment("G:\\My Drive\\Postgrad\\PhD\\Projects\\rabbit-gastrulation-atlas\\RabbitGastrulation2021\\data-in\\rabbit\\anndata.h5ad")
?loadHDF5SummarizedExperiment
?HDF5Array::writeTENxMatrix()
?TENxBrainData
BiocManager::install("TENxBrainData")
library(TENxBrainData)
?TENxBrainData
?HDF5Array::TENxMatrix()
?writeTENxMatrix
?writeHDF5Array
runApp()
?selectizeInput
runApp()
runApp()
temp_dir <- "G:/My Drive/Postgrad/PhD/Projects/rabbit-gastrulation-atlas/RabbitGastrulation2021/data-in/rabbit/logcounts_hdf5array_rowchunks.h5"
?HDF5Array::HDF5Array()
temp_dir <- "G:/My Drive/Postgrad/PhD/Projects/rabbit-gastrulation-atlas/RabbitGastrulation2021/data-in/rabbit/logcounts_hdf5array_rowchunks.h5"
link <- HDF5Array(temp_dir, name="logcounts")
link <- H5SparseMatrix(temp_dir, name="logcounts")
link <- HDF5Array::H5SparseMatrix(temp_dir, name="logcounts")
BiocManager::install("HDF5Array")
detach("package:HDF5Array", unload=TRUE)
detach("package:TENxBrainData", unload=TRUE)
detach("package:HDF5Array", unload=TRUE)
detach("package:LoomExperiment", unload=TRUE)
detach("package:HDF5Array", unload=TRUE)
detach("package:HDF5Array", unload=TRUE)
BiocManager::install("HDF5Array")
BiocManager::install("HDF5Array")
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
r_colData <- readRDS("data/rabbit/colData.rds")
runApp()
r_colData$cluster.sub[1:5]
runApp()
unique(r_colData$cluster.sub)
length(unique(r_colData$cluster.sub))
scrabbitr::getPallete(r_colData$cluster.sub))
scrabbitr::getPallete(r_colData$cluster.sub)
scrabbitr::getPalette(r_colData$cluster.sub)
runApp()
length(unique(col_data$cluster.sub)) > 20
col_data <- as.data.frame(r_colData)
col_data$group <- as.character(col_data[[cluster.sub""]])
col_data$group <- as.character(col_data[["cluster.sub"]])
length(unique(col_data$group)) > 20
runApp()
input <- list()
input$cell_obs <- "cluster.sub"
palette <- scrabbitr::getPalette(as.character(r_colData[[input$cell_obs]]))
palette
col_data <- as.data.frame(r_colData)
col_data$group <- as.character(col_data[[input$cell_obs]])
unique(col_data$group)
ggplot(col_data, aes_string(x="X",y="Y",colour="group")) +
scattermore::geom_scattermore() +
scale_colour_manual(aesthetics=c("color"),
values=palette,drop=TRUE)
coords <- getDimRed()
r_reducedDims <- readRDS("data/rabbit/reducedDims.rds")
coords <- as.data.frame(r_reducedDims[[input$dimred]])
names(coords) <- c("X", "Y")
input$dimred <- "UMAP"
coords <- as.data.frame(r_reducedDims[[input$dimred]])
names(coords) <- c("X", "Y")
col_data <- cbind(col_data, coords)
p <- ggplot(col_data, aes_string(x="X",y="Y",colour="group")) +
scattermore::geom_scattermore() +
scale_colour_manual(aesthetics=c("color"),
values=palette,drop=TRUE)
p
runApp()
r_reducedDims$PCA[1:5,]
coords <- as.data.frame(r_reducedDims[["PCA"]])
names(coords) <- c("X", "Y")
col_data <- as.data.frame(r_colData)
col_data$group <- as.character(col_data[[input$cell_obs]])
col_data <- cbind(col_data, coords)
p <- ggplot(col_data, aes_string(x="X",y="Y",colour="group")) +
scattermore::geom_scattermore() +
scale_colour_manual(aesthetics=c("color"),
values=palette,drop=TRUE)
p
input$cell_obs <- "celltype"
col_data <- as.data.frame(r_colData)
col_data$group <- as.character(col_data[[input$cell_obs]])
col_data <- cbind(col_data, coords)
p <- ggplot(col_data, aes_string(x="X",y="Y",colour="group")) +
scattermore::geom_scattermore() +
scale_colour_manual(aesthetics=c("color"),
values=palette,drop=TRUE)
p
palette <- scrabbitr::getPalette(as.character(r_colData[[input$cell_obs]]))
col_data <- as.data.frame(r_colData)
col_data$group <- as.character(col_data[[input$cell_obs]])
col_data <- cbind(col_data, coords)
p <- ggplot(col_data, aes_string(x="X",y="Y",colour="group")) +
scattermore::geom_scattermore() +
scale_colour_manual(aesthetics=c("color"),
values=palette,drop=TRUE)
p
col_data$obs_id <- scrabbitr::makeObsIDs(col_data[[input$cell_obs]])[col_data[[input$cell_obs]]]
r_colData$obs_id <- col_data$obs_id
label <- "obs_id"
# Get mean position for each group
mean_data <- col_data %>% group_by(group) %>% summarize_at(.vars = vars(X,Y),.funs = c("mean"))
mean_data <- as.data.frame(mean_data[complete.cases(mean_data),])
head(col_data)
runApp()
# Add somite/dissection info
r_colData$somite_count <- 0
r_colData$somite_count[r_colData$sample %in% c(7,8,9)] <- 4
r_colData$somite_count[r_colData$sample %in% c(12,13,14,15)] <- 13
r_colData$somite_count[r_colData$sample %in% c(16,17,18,19)] <- 16
r_colData$somite_count[r_colData$sample %in% c(20,21,22)] <- 11
r_colData$somite_count[r_colData$sample %in% c(23,24,25,26)] <- 19
r_colData$somite_count[r_colData$sample %in% c(1,2,3,4,5,6,10,11)] <- 0
r_colData$dissection <- "Undetermined"
r_colData$dissection[r_colData$sample %in% c(12,16)] <- "Anterior_section"
r_colData$dissection[r_colData$sample %in% c(13,17)] <- "Medial_section"
r_colData$dissection[r_colData$sample %in% c(14,18)] <- "Posterior_section"
r_colData$dissection[r_colData$sample %in% c(20,21,23,24,25)] <- "EP"
r_colData$dissection[r_colData$sample %in% c(15,19,22,26)] <- "YS"
colnames(r_colData$singler_ext) <- "singler"
name(r_colData$singler_ext) <- "singler"
names(r_colData$singler_ext) <- "singler"
head(r_colData)
colnames(r_colData)
colnames(r_colData)[colnames(r_colData) == "singler_ext"] <- "singler"
head(r_colData)
test <- r_colData[,c("cell", "barcode", "sample", "stage", "celltype", "singler", "somite_count", "dissection")]
head(test)
saveRDS(test, "data/rabbit/colData.rds")
runApp()
length(unique(as.character(test$dissection))) > 20
runApp()
col_data <- as.data.frame(test)
input$cell_obs < "dissection"
input$cell_obs <- "dissection"
col_data$group <- as.character(col_data[[input$cell_obs]])
col_data <- cbind(col_data, coords)
p <- ggplot(col_data, aes_string(x="X",y="Y",colour="group")) +
scattermore::geom_scattermore() +
scale_colour_manual(aesthetics=c("color"),
values=palette,drop=TRUE)
p
p + theme(legend.position = "none")
input$dimred <- "UMAP"
coords <- as.data.frame(r_reducedDims[[input$dimred]])[,1:2]
names(coords) <- c("X", "Y")
col_data <- as.data.frame(r_colData)
col_data <- as.data.frame(test)
col_data$group <- as.character(col_data[[input$cell_obs]])
col_data <- cbind(col_data, coords)
p <- ggplot(col_data, aes_string(x="X",y="Y",colour="group")) +
scattermore::geom_scattermore() +
scale_colour_manual(aesthetics=c("color"),
values=palette,drop=TRUE)
p
p + theme(legend.position = "none")
palette <- scrabbitr::getPalette(as.character(r_colData[[input$cell_obs]]))
p <- ggplot(col_data, aes_string(x="X",y="Y",colour="group")) +
scattermore::geom_scattermore() +
scale_colour_manual(aesthetics=c("color"),
values=palette,drop=TRUE)
p + theme(legend.position = "none")
length(unique(col_data$group)) > 20
# Get mean position for each group
mean_data <- col_data %>% group_by(group) %>% summarize_at(.vars = vars(X,Y),.funs = c("mean"))
mean_data <- as.data.frame(mean_data[complete.cases(mean_data),])
rownames(mean_data) <- mean_data$group
# Get position of closest cell to group mean
label_pos <- col_data %>% group_by(group) %>%  filter(
.calcEuclidean(X, mean_data[group,"X"], Y, mean_data[group,"Y"]) ==
min(.calcEuclidean(X, mean_data[group,"X"], Y, mean_data[group,"Y"])))
.calcEuclidean <- function(x1,y1,x2,y2) (x1-y1)**2 + (x2-y2)**2
# Get mean position for each group
mean_data <- col_data %>% group_by(group) %>% summarize_at(.vars = vars(X,Y),.funs = c("mean"))
mean_data <- as.data.frame(mean_data[complete.cases(mean_data),])
rownames(mean_data) <- mean_data$group
# Get position of closest cell to group mean
label_pos <- col_data %>% group_by(group) %>%  filter(
.calcEuclidean(X, mean_data[group,"X"], Y, mean_data[group,"Y"]) ==
min(.calcEuclidean(X, mean_data[group,"X"], Y, mean_data[group,"Y"])))
label_text <- paste0()
p <- p + geom_text_repel(data=label_pos, label=label_pos[[label]],
segment.colour=palette[label_pos$group],
color="black",
min.segment.length = 0,box.padding = 0.5,max.overlaps=Inf,size=4,force=10,
segment.size = 0.8,fontface = 'bold') +
coord_cartesian(clip = "off") +
scale_colour_manual(aesthetics=c("segment.colour"),
values=palette[col_data[[input$cell_obs]]],drop=TRUE)
p <- p + theme_void() +
theme(legend.position="none",
legend.spacing.x = unit(0.01, 'cm'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
aspect.ratio=1)
p
p
input$cell_obs <- "somite_count"
runApp()
link <- HDF5Array::HDF5Array(temp_dir, name='logcounts',as.sparse = TRUE)
# Load data
temp_dir <- "G:/My Drive/Postgrad/PhD/Projects/rabbit-gastrulation-atlas/RabbitGastrulation2021/data-in/rabbit/logcounts_hdf5array_rowchunks.h5"
link <- HDF5Array::HDF5Array(temp_dir, name='logcounts',as.sparse = TRUE)
r_rowData <- readRDS("data/rabbit/rowData.rds")
count <- as.numeric(link[match(as.character(input$gene),
as.character(r_rowData[,input$gene_format])),])
input$gene <- "GATA1"
input$gene_format <- "gene_name"
count <- as.numeric(link[match(as.character(input$gene),
as.character(r_rowData[,input$gene_format])),])
r_colData <- readRDS("data/rabbit/colData.rds")
input
palette <- scrabbitr::getPalette(r_colData[[input$cell_obs]])
col_data <- r_colData
length(unique(r_colData[[input$cell_obs]]
)
)
runApp()
devtools::install_github("vitessce/vitessceR", ref = "keller-mark/minify-js")
3
devtools::install_github("vitessce/vitessceR", ref = "keller-mark/minify-js")
detach("package:vitessceR", unload=TRUE)
devtools::install_github("vitessce/vitessceR", ref = "keller-mark/minify-js")
runApp()
runApp()
devtools::install_github("rstudio/rsconnect")
head(r_rowData)
write.table(r_rowData, "../rabbit-gastrulation-atlas/RabbitGastrulation2022/data-in/rabbit/genes_v2.tsv", sep="\t", col.names = TRUE)
write.table(r_rowData, "../rabbit-gastrulation-atlas/RabbitGastrulation2022/data-in/rabbit/genes_v2.tsv", sep="\t", col.names = TRUE, quote = FALSE)
write.table(r_rowData, "../rabbit-gastrulation-atlas/RabbitGastrulation2022/data-in/rabbit/genes_v2.tsv", sep="\t", col.names = TRUE, quote = FALSE, row.names = FALSE)
rsconnect::setAccountInfo(name='crukci', token='F329F12AF734C192C51F291B48CE2273', secret='MlmeTAK+4DUM4Js38xbvRxy7NKe8qXq2Oli4ONT4')
deployApp()
?rsconnect::deployApp()
rsconnect::deployApp(server="shinyapps.io")
library(rsconnect)
options(rsconnect.max.bundle.size=5000000000)
options("repos")
library(BiocManager)
options(repos = BiocManager::repositories())
rsconnect::deployApp(server="shinyapps.io")
runApp()
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='crukci', token='F329F12AF734C192C51F291B48CE2273', secret='MlmeTAK+4DUM4Js38xbvRxy7NKe8qXq2Oli4ONT4')
rsconnect::deployApp()
rsconnect::deployApp()
rsconnect::setAccountInfo(name='crukci', token='F329F12AF734C192C51F291B48CE2273', secret='MlmeTAK+4DUM4Js38xbvRxy7NKe8qXq2Oli4ONT4')
rsconnect::deployApp()
rsconnect::deployApp()
sessionInfo()
rsconnect::deployApp()
?rsconnect::terminateApp
rsconnect::terminateApp("scrabbit-shiny")
